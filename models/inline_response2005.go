// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InlineResponse2005 inline response 200 5
// swagger:model inline_response_200_5
type InlineResponse2005 struct {

	// resource type
	// Required: true
	ResourceType *string `json:"_type"`

	// embedded
	// Required: true
	Embedded *InlineResponse2004EmbeddedEmbedded `json:"_embedded"`

	// links
	// Required: true
	Links *InlineResponse2004EmbeddedLinks `json:"_links"`

	// aws region
	// Required: true
	AwsRegion *string `json:"aws_region"`

	// aws snapshot id
	// Required: true
	AwsSnapshotID *string `json:"aws_snapshot_id"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// database handle
	// Required: true
	DatabaseHandle *string `json:"database_handle"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this inline response 200 5
func (m *InlineResponse2005) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsSnapshotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse2005) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2005) validateEmbedded(formats strfmt.Registry) error {

	if err := validate.Required("_embedded", "body", m.Embedded); err != nil {
		return err
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse2005) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse2005) validateAwsRegion(formats strfmt.Registry) error {

	if err := validate.Required("aws_region", "body", m.AwsRegion); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2005) validateAwsSnapshotID(formats strfmt.Registry) error {

	if err := validate.Required("aws_snapshot_id", "body", m.AwsSnapshotID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2005) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2005) validateDatabaseHandle(formats strfmt.Registry) error {

	if err := validate.Required("database_handle", "body", m.DatabaseHandle); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2005) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2005) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse2005) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse2005) UnmarshalBinary(b []byte) error {
	var res InlineResponse2005
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
