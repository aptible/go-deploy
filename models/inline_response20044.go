// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InlineResponse20044 inline response 200 44
//
// swagger:model inline_response_200_44
type InlineResponse20044 struct {

	// resource type
	// Required: true
	ResourceType *string `json:"_type"`

	// links
	// Required: true
	Links *InlineResponse20041EmbeddedLinks `json:"_links"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// handle
	// Required: true
	Handle *string `json:"handle"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// our gateway
	// Required: true
	OurGateway *string `json:"our_gateway"`

	// our networks
	// Required: true
	OurNetworks [][]string `json:"our_networks"`

	// peer gateway
	// Required: true
	PeerGateway *string `json:"peer_gateway"`

	// peer networks
	// Required: true
	PeerNetworks [][]string `json:"peer_networks"`

	// perfect forward secrecy
	// Required: true
	PerfectForwardSecrecy *bool `json:"perfect_forward_secrecy"`

	// phase 1 alg
	// Required: true
	Phase1Alg *string `json:"phase_1_alg"`

	// phase 1 dh group
	// Required: true
	Phase1DhGroup *int64 `json:"phase_1_dh_group"`

	// phase 1 lifetime
	// Required: true
	Phase1Lifetime *int64 `json:"phase_1_lifetime"`

	// phase 2 alg
	// Required: true
	Phase2Alg *string `json:"phase_2_alg"`

	// phase 2 dh group
	// Required: true
	Phase2DhGroup *int64 `json:"phase_2_dh_group"`

	// phase 2 lifetime
	// Required: true
	Phase2Lifetime *int64 `json:"phase_2_lifetime"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this inline response 200 44
func (m *InlineResponse20044) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOurGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOurNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerfectForwardSecrecy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase1Alg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase1DhGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase1Lifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase2Alg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase2DhGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase2Lifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse20044) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20044) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateHandle(formats strfmt.Registry) error {

	if err := validate.Required("handle", "body", m.Handle); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateOurGateway(formats strfmt.Registry) error {

	if err := validate.Required("our_gateway", "body", m.OurGateway); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateOurNetworks(formats strfmt.Registry) error {

	if err := validate.Required("our_networks", "body", m.OurNetworks); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validatePeerGateway(formats strfmt.Registry) error {

	if err := validate.Required("peer_gateway", "body", m.PeerGateway); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validatePeerNetworks(formats strfmt.Registry) error {

	if err := validate.Required("peer_networks", "body", m.PeerNetworks); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validatePerfectForwardSecrecy(formats strfmt.Registry) error {

	if err := validate.Required("perfect_forward_secrecy", "body", m.PerfectForwardSecrecy); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validatePhase1Alg(formats strfmt.Registry) error {

	if err := validate.Required("phase_1_alg", "body", m.Phase1Alg); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validatePhase1DhGroup(formats strfmt.Registry) error {

	if err := validate.Required("phase_1_dh_group", "body", m.Phase1DhGroup); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validatePhase1Lifetime(formats strfmt.Registry) error {

	if err := validate.Required("phase_1_lifetime", "body", m.Phase1Lifetime); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validatePhase2Alg(formats strfmt.Registry) error {

	if err := validate.Required("phase_2_alg", "body", m.Phase2Alg); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validatePhase2DhGroup(formats strfmt.Registry) error {

	if err := validate.Required("phase_2_dh_group", "body", m.Phase2DhGroup); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validatePhase2Lifetime(formats strfmt.Registry) error {

	if err := validate.Required("phase_2_lifetime", "body", m.Phase2Lifetime); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this inline response 200 44 based on the context it is used
func (m *InlineResponse20044) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse20044) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse20044) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse20044) UnmarshalBinary(b []byte) error {
	var res InlineResponse20044
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
