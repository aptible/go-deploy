// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InlineResponse200EmbeddedEmbedded inline response 200 embedded embedded
// swagger:model inline_response_200__embedded__embedded
type InlineResponse200EmbeddedEmbedded struct {

	// log drains
	LogDrains []*InlineResponse200EmbeddedEmbeddedLogDrains `json:"log_drains"`

	// permissions
	Permissions []*InlineResponse200EmbeddedEmbeddedPermissions `json:"permissions"`
}

// Validate validates this inline response 200 embedded embedded
func (m *InlineResponse200EmbeddedEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogDrains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse200EmbeddedEmbedded) validateLogDrains(formats strfmt.Registry) error {

	if swag.IsZero(m.LogDrains) { // not required
		return nil
	}

	for i := 0; i < len(m.LogDrains); i++ {
		if swag.IsZero(m.LogDrains[i]) { // not required
			continue
		}

		if m.LogDrains[i] != nil {
			if err := m.LogDrains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("log_drains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InlineResponse200EmbeddedEmbedded) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse200EmbeddedEmbedded) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse200EmbeddedEmbedded) UnmarshalBinary(b []byte) error {
	var res InlineResponse200EmbeddedEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
