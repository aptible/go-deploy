// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InlineResponse20039 inline response 200 39
// swagger:model inline_response_200_39
type InlineResponse20039 struct {

	// resource type
	// Required: true
	ResourceType *string `json:"_type"`

	// links
	// Required: true
	Links *InlineResponse20038EmbeddedLinks `json:"_links"`

	// account id
	// Required: true
	AccountID *string `json:"account_id"`

	// brickwall enabled
	// Required: true
	BrickwallEnabled *bool `json:"brickwall_enabled"`

	// cpu limits
	// Required: true
	CPULimits *bool `json:"cpu_limits"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// default
	// Required: true
	Default *bool `json:"default"`

	// default domain
	// Required: true
	DefaultDomain *string `json:"default_domain"`

	// expose intrusion detection reports
	// Required: true
	ExposeIntrusionDetectionReports *bool `json:"expose_intrusion_detection_reports"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// internal domain
	// Required: true
	InternalDomain *string `json:"internal_domain"`

	// intrusion detection
	// Required: true
	IntrusionDetection *bool `json:"intrusion_detection"`

	// memory limits
	// Required: true
	MemoryLimits *bool `json:"memory_limits"`

	// name
	// Required: true
	Name *string `json:"name"`

	// outbound ip addresses
	// Required: true
	OutboundIPAddresses []string `json:"outbound_ip_addresses"`

	// public
	// Required: true
	Public *bool `json:"public"`

	// region
	// Required: true
	Region *string `json:"region"`

	// ssh host dsa public key
	// Required: true
	SSHHostDsaPublicKey *string `json:"ssh_host_dsa_public_key"`

	// ssh host ecdsa public key
	// Required: true
	SSHHostEcdsaPublicKey *string `json:"ssh_host_ecdsa_public_key"`

	// ssh host rsa public key
	// Required: true
	SSHHostRsaPublicKey *string `json:"ssh_host_rsa_public_key"`

	// ssh portal host
	// Required: true
	SSHPortalHost *string `json:"ssh_portal_host"`

	// ssh portal port
	// Required: true
	SSHPortalPort *int64 `json:"ssh_portal_port"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// version
	// Required: true
	// Enum: [v1 v2]
	Version *string `json:"version"`

	// vpc id
	// Required: true
	VpcID *string `json:"vpc_id"`
}

// Validate validates this inline response 200 39
func (m *InlineResponse20039) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrickwallEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPULimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExposeIntrusionDetectionReports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntrusionDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutboundIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHHostDsaPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHHostEcdsaPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHHostRsaPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPortalHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPortalPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse20039) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20039) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateBrickwallEnabled(formats strfmt.Registry) error {

	if err := validate.Required("brickwall_enabled", "body", m.BrickwallEnabled); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateCPULimits(formats strfmt.Registry) error {

	if err := validate.Required("cpu_limits", "body", m.CPULimits); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("default", "body", m.Default); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateDefaultDomain(formats strfmt.Registry) error {

	if err := validate.Required("default_domain", "body", m.DefaultDomain); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateExposeIntrusionDetectionReports(formats strfmt.Registry) error {

	if err := validate.Required("expose_intrusion_detection_reports", "body", m.ExposeIntrusionDetectionReports); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateInternalDomain(formats strfmt.Registry) error {

	if err := validate.Required("internal_domain", "body", m.InternalDomain); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateIntrusionDetection(formats strfmt.Registry) error {

	if err := validate.Required("intrusion_detection", "body", m.IntrusionDetection); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateMemoryLimits(formats strfmt.Registry) error {

	if err := validate.Required("memory_limits", "body", m.MemoryLimits); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateOutboundIPAddresses(formats strfmt.Registry) error {

	if err := validate.Required("outbound_ip_addresses", "body", m.OutboundIPAddresses); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validatePublic(formats strfmt.Registry) error {

	if err := validate.Required("public", "body", m.Public); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateSSHHostDsaPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("ssh_host_dsa_public_key", "body", m.SSHHostDsaPublicKey); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateSSHHostEcdsaPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("ssh_host_ecdsa_public_key", "body", m.SSHHostEcdsaPublicKey); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateSSHHostRsaPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("ssh_host_rsa_public_key", "body", m.SSHHostRsaPublicKey); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateSSHPortalHost(formats strfmt.Registry) error {

	if err := validate.Required("ssh_portal_host", "body", m.SSHPortalHost); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateSSHPortalPort(formats strfmt.Registry) error {

	if err := validate.Required("ssh_portal_port", "body", m.SSHPortalPort); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

var inlineResponse20039TypeVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["v1","v2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inlineResponse20039TypeVersionPropEnum = append(inlineResponse20039TypeVersionPropEnum, v)
	}
}

const (

	// InlineResponse20039VersionV1 captures enum value "v1"
	InlineResponse20039VersionV1 string = "v1"

	// InlineResponse20039VersionV2 captures enum value "v2"
	InlineResponse20039VersionV2 string = "v2"
)

// prop value enum
func (m *InlineResponse20039) validateVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, inlineResponse20039TypeVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InlineResponse20039) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	// value enum
	if err := m.validateVersionEnum("version", "body", *m.Version); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20039) validateVpcID(formats strfmt.Registry) error {

	if err := validate.Required("vpc_id", "body", m.VpcID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse20039) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse20039) UnmarshalBinary(b []byte) error {
	var res InlineResponse20039
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
