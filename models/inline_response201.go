// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InlineResponse201 inline response 201
// swagger:model inline_response_201
type InlineResponse201 struct {

	// resource type
	// Required: true
	ResourceType *string `json:"_type"`

	// embedded
	// Required: true
	Embedded *InlineResponse200EmbeddedEmbedded `json:"_embedded"`

	// links
	// Required: true
	Links *InlineResponse200EmbeddedLinks `json:"_links"`

	// activated
	// Required: true
	Activated *bool `json:"activated"`

	// app container count
	// Required: true
	AppContainerCount *int64 `json:"app_container_count"`

	// bastion host
	// Required: true
	BastionHost *string `json:"bastion_host"`

	// bastion port
	// Required: true
	BastionPort *int64 `json:"bastion_port"`

	// container count
	// Required: true
	ContainerCount *int64 `json:"container_count"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// database container count
	// Required: true
	DatabaseContainerCount *int64 `json:"database_container_count"`

	// domain count
	// Required: true
	DomainCount *int64 `json:"domain_count"`

	// gentlemanjerry certificate
	// Required: true
	GentlemanjerryCertificate *string `json:"gentlemanjerry_certificate"`

	// gentlemanjerry docker name
	// Required: true
	GentlemanjerryDockerName *string `json:"gentlemanjerry_docker_name"`

	// gentlemanjerry endpoint
	// Required: true
	GentlemanjerryEndpoint *string `json:"gentlemanjerry_endpoint"`

	// gentlemanjerry instance id
	// Required: true
	GentlemanjerryInstanceID *string `json:"gentlemanjerry_instance_id"`

	// handle
	// Required: true
	Handle *string `json:"handle"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// number
	// Required: true
	Number *string `json:"number"`

	// ssh portal port
	// Required: true
	SSHPortalPort *int64 `json:"ssh_portal_port"`

	// sweetness stack
	// Required: true
	SweetnessStack *string `json:"sweetness_stack"`

	// sweetness stack version
	// Required: true
	// Enum: [v1 v2]
	SweetnessStackVersion *string `json:"sweetness_stack_version"`

	// syslog host
	// Required: true
	SyslogHost *string `json:"syslog_host"`

	// syslog port
	// Required: true
	SyslogPort *int64 `json:"syslog_port"`

	// total app count
	// Required: true
	TotalAppCount *int64 `json:"total_app_count"`

	// total database count
	// Required: true
	TotalDatabaseCount *int64 `json:"total_database_count"`

	// total disk size
	// Required: true
	TotalDiskSize *int64 `json:"total_disk_size"`

	// type
	// Required: true
	Type *string `json:"type"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this inline response 201
func (m *InlineResponse201) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppContainerCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBastionHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBastionPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseContainerCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGentlemanjerryCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGentlemanjerryDockerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGentlemanjerryEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGentlemanjerryInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPortalPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSweetnessStack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSweetnessStackVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalAppCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDatabaseCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDiskSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse201) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateEmbedded(formats strfmt.Registry) error {

	if err := validate.Required("_embedded", "body", m.Embedded); err != nil {
		return err
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse201) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse201) validateActivated(formats strfmt.Registry) error {

	if err := validate.Required("activated", "body", m.Activated); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateAppContainerCount(formats strfmt.Registry) error {

	if err := validate.Required("app_container_count", "body", m.AppContainerCount); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateBastionHost(formats strfmt.Registry) error {

	if err := validate.Required("bastion_host", "body", m.BastionHost); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateBastionPort(formats strfmt.Registry) error {

	if err := validate.Required("bastion_port", "body", m.BastionPort); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateContainerCount(formats strfmt.Registry) error {

	if err := validate.Required("container_count", "body", m.ContainerCount); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateDatabaseContainerCount(formats strfmt.Registry) error {

	if err := validate.Required("database_container_count", "body", m.DatabaseContainerCount); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateDomainCount(formats strfmt.Registry) error {

	if err := validate.Required("domain_count", "body", m.DomainCount); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateGentlemanjerryCertificate(formats strfmt.Registry) error {

	if err := validate.Required("gentlemanjerry_certificate", "body", m.GentlemanjerryCertificate); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateGentlemanjerryDockerName(formats strfmt.Registry) error {

	if err := validate.Required("gentlemanjerry_docker_name", "body", m.GentlemanjerryDockerName); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateGentlemanjerryEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("gentlemanjerry_endpoint", "body", m.GentlemanjerryEndpoint); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateGentlemanjerryInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("gentlemanjerry_instance_id", "body", m.GentlemanjerryInstanceID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateHandle(formats strfmt.Registry) error {

	if err := validate.Required("handle", "body", m.Handle); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateSSHPortalPort(formats strfmt.Registry) error {

	if err := validate.Required("ssh_portal_port", "body", m.SSHPortalPort); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateSweetnessStack(formats strfmt.Registry) error {

	if err := validate.Required("sweetness_stack", "body", m.SweetnessStack); err != nil {
		return err
	}

	return nil
}

var inlineResponse201TypeSweetnessStackVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["v1","v2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inlineResponse201TypeSweetnessStackVersionPropEnum = append(inlineResponse201TypeSweetnessStackVersionPropEnum, v)
	}
}

const (

	// InlineResponse201SweetnessStackVersionV1 captures enum value "v1"
	InlineResponse201SweetnessStackVersionV1 string = "v1"

	// InlineResponse201SweetnessStackVersionV2 captures enum value "v2"
	InlineResponse201SweetnessStackVersionV2 string = "v2"
)

// prop value enum
func (m *InlineResponse201) validateSweetnessStackVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, inlineResponse201TypeSweetnessStackVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InlineResponse201) validateSweetnessStackVersion(formats strfmt.Registry) error {

	if err := validate.Required("sweetness_stack_version", "body", m.SweetnessStackVersion); err != nil {
		return err
	}

	// value enum
	if err := m.validateSweetnessStackVersionEnum("sweetness_stack_version", "body", *m.SweetnessStackVersion); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateSyslogHost(formats strfmt.Registry) error {

	if err := validate.Required("syslog_host", "body", m.SyslogHost); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateSyslogPort(formats strfmt.Registry) error {

	if err := validate.Required("syslog_port", "body", m.SyslogPort); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateTotalAppCount(formats strfmt.Registry) error {

	if err := validate.Required("total_app_count", "body", m.TotalAppCount); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateTotalDatabaseCount(formats strfmt.Registry) error {

	if err := validate.Required("total_database_count", "body", m.TotalDatabaseCount); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateTotalDiskSize(formats strfmt.Registry) error {

	if err := validate.Required("total_disk_size", "body", m.TotalDiskSize); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse201) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse201) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse201) UnmarshalBinary(b []byte) error {
	var res InlineResponse201
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
