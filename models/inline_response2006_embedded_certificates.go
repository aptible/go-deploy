// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InlineResponse2006EmbeddedCertificates inline response 200 6 embedded certificates
// swagger:model inline_response_200_6__embedded_certificates
type InlineResponse2006EmbeddedCertificates struct {

	// resource type
	ResourceType string `json:"_type,omitempty"`

	// links
	Links *InlineResponse2006EmbeddedLinks `json:"_links,omitempty"`

	// acme
	Acme bool `json:"acme,omitempty"`

	// certificate arn
	CertificateArn *string `json:"certificate_arn,omitempty"`

	// certificate body
	CertificateBody string `json:"certificate_body,omitempty"`

	// certificate chain
	CertificateChain string `json:"certificate_chain,omitempty"`

	// common name
	CommonName string `json:"common_name,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// issuer common name
	IssuerCommonName string `json:"issuer_common_name,omitempty"`

	// issuer country
	IssuerCountry string `json:"issuer_country,omitempty"`

	// issuer organization
	IssuerOrganization string `json:"issuer_organization,omitempty"`

	// issuer website
	IssuerWebsite *string `json:"issuer_website,omitempty"`

	// leaf certificate
	LeafCertificate string `json:"leaf_certificate,omitempty"`

	// not after
	NotAfter string `json:"not_after,omitempty"`

	// not before
	NotBefore string `json:"not_before,omitempty"`

	// private key
	PrivateKey string `json:"private_key,omitempty"`

	// private key algorithm
	PrivateKeyAlgorithm string `json:"private_key_algorithm,omitempty"`

	// self signed
	SelfSigned bool `json:"self_signed,omitempty"`

	// sha256 fingerprint
	Sha256Fingerprint string `json:"sha256_fingerprint,omitempty"`

	// subject alternative names
	SubjectAlternativeNames []string `json:"subject_alternative_names"`

	// subject country
	SubjectCountry *string `json:"subject_country,omitempty"`

	// subject locale
	SubjectLocale *string `json:"subject_locale,omitempty"`

	// subject organization
	SubjectOrganization *string `json:"subject_organization,omitempty"`

	// subject state
	SubjectState *string `json:"subject_state,omitempty"`

	// trusted
	Trusted bool `json:"trusted,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this inline response 200 6 embedded certificates
func (m *InlineResponse2006EmbeddedCertificates) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse2006EmbeddedCertificates) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse2006EmbeddedCertificates) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse2006EmbeddedCertificates) UnmarshalBinary(b []byte) error {
	var res InlineResponse2006EmbeddedCertificates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
