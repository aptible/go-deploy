// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InlineResponse20016EmbeddedLinks inline response 200 16 embedded links
//
// swagger:model inline_response_200_16__embedded__links
type InlineResponse20016EmbeddedLinks struct {

	// account
	Account *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"account,omitempty"`

	// backups
	Backups *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"backups,omitempty"`

	// configurations
	Configurations *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"configurations,omitempty"`

	// current configuration
	CurrentConfiguration *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"current_configuration,omitempty"`

	// database credentials
	DatabaseCredentials *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"database_credentials,omitempty"`

	// database image
	DatabaseImage *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"database_image,omitempty"`

	// dependents
	Dependents *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"dependents,omitempty"`

	// disk
	Disk *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"disk,omitempty"`

	// initialize from
	InitializeFrom *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"initialize_from,omitempty"`

	// operations
	Operations *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"operations,omitempty"`

	// self
	Self *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"self,omitempty"`

	// service
	Service *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"service,omitempty"`
}

// Validate validates this inline response 200 16 embedded links
func (m *InlineResponse20016EmbeddedLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitializeFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateBackups(formats strfmt.Registry) error {
	if swag.IsZero(m.Backups) { // not required
		return nil
	}

	if m.Backups != nil {
		if err := m.Backups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backups")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateConfigurations(formats strfmt.Registry) error {
	if swag.IsZero(m.Configurations) { // not required
		return nil
	}

	if m.Configurations != nil {
		if err := m.Configurations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configurations")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateCurrentConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentConfiguration) { // not required
		return nil
	}

	if m.CurrentConfiguration != nil {
		if err := m.CurrentConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current_configuration")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateDatabaseCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.DatabaseCredentials) { // not required
		return nil
	}

	if m.DatabaseCredentials != nil {
		if err := m.DatabaseCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("database_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("database_credentials")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateDatabaseImage(formats strfmt.Registry) error {
	if swag.IsZero(m.DatabaseImage) { // not required
		return nil
	}

	if m.DatabaseImage != nil {
		if err := m.DatabaseImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("database_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("database_image")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateDependents(formats strfmt.Registry) error {
	if swag.IsZero(m.Dependents) { // not required
		return nil
	}

	if m.Dependents != nil {
		if err := m.Dependents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dependents")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.Disk) { // not required
		return nil
	}

	if m.Disk != nil {
		if err := m.Disk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateInitializeFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.InitializeFrom) { // not required
		return nil
	}

	if m.InitializeFrom != nil {
		if err := m.InitializeFrom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initialize_from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initialize_from")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateOperations(formats strfmt.Registry) error {
	if swag.IsZero(m.Operations) { // not required
		return nil
	}

	if m.Operations != nil {
		if err := m.Operations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operations")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) validateService(formats strfmt.Registry) error {
	if swag.IsZero(m.Service) { // not required
		return nil
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this inline response 200 16 embedded links based on the context it is used
func (m *InlineResponse20016EmbeddedLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigurations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatabaseCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatabaseImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDependents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitializeFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.Account != nil {
		if err := m.Account.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateBackups(ctx context.Context, formats strfmt.Registry) error {

	if m.Backups != nil {
		if err := m.Backups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backups")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateConfigurations(ctx context.Context, formats strfmt.Registry) error {

	if m.Configurations != nil {
		if err := m.Configurations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configurations")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateCurrentConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentConfiguration != nil {
		if err := m.CurrentConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current_configuration")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateDatabaseCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.DatabaseCredentials != nil {
		if err := m.DatabaseCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("database_credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("database_credentials")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateDatabaseImage(ctx context.Context, formats strfmt.Registry) error {

	if m.DatabaseImage != nil {
		if err := m.DatabaseImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("database_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("database_image")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateDependents(ctx context.Context, formats strfmt.Registry) error {

	if m.Dependents != nil {
		if err := m.Dependents.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dependents")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.Disk != nil {
		if err := m.Disk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateInitializeFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.InitializeFrom != nil {
		if err := m.InitializeFrom.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initialize_from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initialize_from")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateOperations(ctx context.Context, formats strfmt.Registry) error {

	if m.Operations != nil {
		if err := m.Operations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operations")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if m.Self != nil {
		if err := m.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20016EmbeddedLinks) contextValidateService(ctx context.Context, formats strfmt.Registry) error {

	if m.Service != nil {
		if err := m.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse20016EmbeddedLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse20016EmbeddedLinks) UnmarshalBinary(b []byte) error {
	var res InlineResponse20016EmbeddedLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
