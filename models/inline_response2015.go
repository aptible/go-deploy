// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InlineResponse2015 inline response 201 5
//
// swagger:model inline_response_201_5
type InlineResponse2015 struct {

	// resource type
	// Required: true
	ResourceType *string `json:"_type"`

	// links
	// Required: true
	Links *InlineResponse200EmbeddedEmbeddedLinks `json:"_links"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// drain apps
	// Required: true
	DrainApps *bool `json:"drain_apps"`

	// drain databases
	// Required: true
	DrainDatabases *bool `json:"drain_databases"`

	// drain ephemeral sessions
	// Required: true
	DrainEphemeralSessions *bool `json:"drain_ephemeral_sessions"`

	// drain host
	// Required: true
	DrainHost *string `json:"drain_host"`

	// drain password
	// Required: true
	DrainPassword *string `json:"drain_password"`

	// drain port
	// Required: true
	DrainPort *int64 `json:"drain_port"`

	// drain proxies
	// Required: true
	DrainProxies *bool `json:"drain_proxies"`

	// drain type
	// Required: true
	DrainType *string `json:"drain_type"`

	// drain username
	// Required: true
	DrainUsername *string `json:"drain_username"`

	// gentlemanjerry allocation
	// Required: true
	GentlemanjerryAllocation []string `json:"gentlemanjerry_allocation"`

	// gentlemanjerry certificate
	// Required: true
	GentlemanjerryCertificate *string `json:"gentlemanjerry_certificate"`

	// gentlemanjerry docker name
	// Required: true
	GentlemanjerryDockerName *string `json:"gentlemanjerry_docker_name"`

	// gentlemanjerry host
	// Required: true
	GentlemanjerryHost *string `json:"gentlemanjerry_host"`

	// gentlemanjerry instance id
	// Required: true
	GentlemanjerryInstanceID *string `json:"gentlemanjerry_instance_id"`

	// gentlemanjerry port mapping
	// Required: true
	GentlemanjerryPortMapping [][]int64 `json:"gentlemanjerry_port_mapping"`

	// handle
	// Required: true
	Handle *string `json:"handle"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// logging token
	// Required: true
	LoggingToken *string `json:"logging_token"`

	// status
	// Required: true
	Status *string `json:"status"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this inline response 201 5
func (m *InlineResponse2015) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrainApps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrainDatabases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrainEphemeralSessions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrainHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrainPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrainPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrainProxies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrainType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrainUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGentlemanjerryAllocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGentlemanjerryCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGentlemanjerryDockerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGentlemanjerryHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGentlemanjerryInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGentlemanjerryPortMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoggingToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse2015) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse2015) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateDrainApps(formats strfmt.Registry) error {

	if err := validate.Required("drain_apps", "body", m.DrainApps); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateDrainDatabases(formats strfmt.Registry) error {

	if err := validate.Required("drain_databases", "body", m.DrainDatabases); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateDrainEphemeralSessions(formats strfmt.Registry) error {

	if err := validate.Required("drain_ephemeral_sessions", "body", m.DrainEphemeralSessions); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateDrainHost(formats strfmt.Registry) error {

	if err := validate.Required("drain_host", "body", m.DrainHost); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateDrainPassword(formats strfmt.Registry) error {

	if err := validate.Required("drain_password", "body", m.DrainPassword); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateDrainPort(formats strfmt.Registry) error {

	if err := validate.Required("drain_port", "body", m.DrainPort); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateDrainProxies(formats strfmt.Registry) error {

	if err := validate.Required("drain_proxies", "body", m.DrainProxies); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateDrainType(formats strfmt.Registry) error {

	if err := validate.Required("drain_type", "body", m.DrainType); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateDrainUsername(formats strfmt.Registry) error {

	if err := validate.Required("drain_username", "body", m.DrainUsername); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateGentlemanjerryAllocation(formats strfmt.Registry) error {

	if err := validate.Required("gentlemanjerry_allocation", "body", m.GentlemanjerryAllocation); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateGentlemanjerryCertificate(formats strfmt.Registry) error {

	if err := validate.Required("gentlemanjerry_certificate", "body", m.GentlemanjerryCertificate); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateGentlemanjerryDockerName(formats strfmt.Registry) error {

	if err := validate.Required("gentlemanjerry_docker_name", "body", m.GentlemanjerryDockerName); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateGentlemanjerryHost(formats strfmt.Registry) error {

	if err := validate.Required("gentlemanjerry_host", "body", m.GentlemanjerryHost); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateGentlemanjerryInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("gentlemanjerry_instance_id", "body", m.GentlemanjerryInstanceID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateGentlemanjerryPortMapping(formats strfmt.Registry) error {

	if err := validate.Required("gentlemanjerry_port_mapping", "body", m.GentlemanjerryPortMapping); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateHandle(formats strfmt.Registry) error {

	if err := validate.Required("handle", "body", m.Handle); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateLoggingToken(formats strfmt.Registry) error {

	if err := validate.Required("logging_token", "body", m.LoggingToken); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse2015) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this inline response 201 5 based on the context it is used
func (m *InlineResponse2015) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse2015) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse2015) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse2015) UnmarshalBinary(b []byte) error {
	var res InlineResponse2015
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
