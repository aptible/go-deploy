// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InlineResponse200EmbeddedLinks inline response 200 embedded links
// swagger:model inline_response_200__embedded__links
type InlineResponse200EmbeddedLinks struct {

	// activity reports
	ActivityReports *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"activity_reports,omitempty"`

	// apps
	Apps *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"apps,omitempty"`

	// backups
	Backups *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"backups,omitempty"`

	// certificates
	Certificates *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"certificates,omitempty"`

	// databases
	Databases *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"databases,omitempty"`

	// disks
	Disks *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"disks,omitempty"`

	// log drains
	LogDrains *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"log_drains,omitempty"`

	// metric drains
	MetricDrains *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"metric_drains,omitempty"`

	// operations
	Operations *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"operations,omitempty"`

	// organization
	Organization *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"organization,omitempty"`

	// permissions
	Permissions *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"permissions,omitempty"`

	// self
	Self *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"self,omitempty"`

	// services
	Services *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"services,omitempty"`

	// stack
	Stack *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"stack,omitempty"`

	// vhosts
	Vhosts *InlineResponse200EmbeddedEmbeddedLinksAccount `json:"vhosts,omitempty"`
}

// Validate validates this inline response 200 embedded links
func (m *InlineResponse200EmbeddedLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityReports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogDrains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricDrains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVhosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateActivityReports(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivityReports) { // not required
		return nil
	}

	if m.ActivityReports != nil {
		if err := m.ActivityReports.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activity_reports")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateApps(formats strfmt.Registry) error {

	if swag.IsZero(m.Apps) { // not required
		return nil
	}

	if m.Apps != nil {
		if err := m.Apps.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apps")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateBackups(formats strfmt.Registry) error {

	if swag.IsZero(m.Backups) { // not required
		return nil
	}

	if m.Backups != nil {
		if err := m.Backups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backups")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateCertificates(formats strfmt.Registry) error {

	if swag.IsZero(m.Certificates) { // not required
		return nil
	}

	if m.Certificates != nil {
		if err := m.Certificates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificates")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateDatabases(formats strfmt.Registry) error {

	if swag.IsZero(m.Databases) { // not required
		return nil
	}

	if m.Databases != nil {
		if err := m.Databases.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("databases")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateDisks(formats strfmt.Registry) error {

	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	if m.Disks != nil {
		if err := m.Disks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateLogDrains(formats strfmt.Registry) error {

	if swag.IsZero(m.LogDrains) { // not required
		return nil
	}

	if m.LogDrains != nil {
		if err := m.LogDrains.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("log_drains")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateMetricDrains(formats strfmt.Registry) error {

	if swag.IsZero(m.MetricDrains) { // not required
		return nil
	}

	if m.MetricDrains != nil {
		if err := m.MetricDrains.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_drains")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateOperations(formats strfmt.Registry) error {

	if swag.IsZero(m.Operations) { // not required
		return nil
	}

	if m.Operations != nil {
		if err := m.Operations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operations")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("self")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateServices(formats strfmt.Registry) error {

	if swag.IsZero(m.Services) { // not required
		return nil
	}

	if m.Services != nil {
		if err := m.Services.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("services")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateStack(formats strfmt.Registry) error {

	if swag.IsZero(m.Stack) { // not required
		return nil
	}

	if m.Stack != nil {
		if err := m.Stack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stack")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedLinks) validateVhosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Vhosts) { // not required
		return nil
	}

	if m.Vhosts != nil {
		if err := m.Vhosts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vhosts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse200EmbeddedLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse200EmbeddedLinks) UnmarshalBinary(b []byte) error {
	var res InlineResponse200EmbeddedLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
