// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InlineResponse20040EmbeddedVhosts inline response 200 40 embedded vhosts
//
// swagger:model inline_response_200_40__embedded_vhosts
type InlineResponse20040EmbeddedVhosts struct {

	// resource type
	ResourceType string `json:"_type,omitempty"`

	// links
	Links *InlineResponse20040EmbeddedLinks `json:"_links,omitempty"`

	// acme
	Acme bool `json:"acme,omitempty"`

	// acme configuration
	AcmeConfiguration *InlineResponse20040EmbeddedAcmeConfiguration `json:"acme_configuration,omitempty"`

	// acme dns challenge host
	AcmeDNSChallengeHost *string `json:"acme_dns_challenge_host,omitempty"`

	// acme status
	AcmeStatus *string `json:"acme_status,omitempty"`

	// application load balancer arn
	ApplicationLoadBalancerArn *string `json:"application_load_balancer_arn,omitempty"`

	// container exposed ports
	ContainerExposedPorts []int64 `json:"container_exposed_ports"`

	// container port
	ContainerPort *int64 `json:"container_port,omitempty"`

	// container ports
	ContainerPorts []int64 `json:"container_ports"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// default
	Default bool `json:"default,omitempty"`

	// docker name
	DockerName *string `json:"docker_name,omitempty"`

	// elastic load balancer name
	ElasticLoadBalancerName *string `json:"elastic_load_balancer_name,omitempty"`

	// external host
	ExternalHost *string `json:"external_host,omitempty"`

	// external http port
	ExternalHTTPPort *int64 `json:"external_http_port,omitempty"`

	// external https port
	ExternalHTTPSPort *int64 `json:"external_https_port,omitempty"`

	// host mapped ports
	HostMappedPorts []int64 `json:"host_mapped_ports"`

	// id
	ID int64 `json:"id,omitempty"`

	// internal
	Internal bool `json:"internal,omitempty"`

	// internal health port
	InternalHealthPort *int64 `json:"internal_health_port,omitempty"`

	// internal host
	InternalHost *string `json:"internal_host,omitempty"`

	// internal http port
	InternalHTTPPort *int64 `json:"internal_http_port,omitempty"`

	// internal https port
	InternalHTTPSPort *int64 `json:"internal_https_port,omitempty"`

	// ip whitelist
	IPWhitelist []string `json:"ip_whitelist"`

	// platform
	Platform string `json:"platform,omitempty"`

	// security group id
	SecurityGroupID *string `json:"security_group_id,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// user domain
	UserDomain *string `json:"user_domain,omitempty"`

	// virtual domain
	VirtualDomain string `json:"virtual_domain,omitempty"`
}

// Validate validates this inline response 200 40 embedded vhosts
func (m *InlineResponse20040EmbeddedVhosts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcmeConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse20040EmbeddedVhosts) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20040EmbeddedVhosts) validateAcmeConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.AcmeConfiguration) { // not required
		return nil
	}

	if m.AcmeConfiguration != nil {
		if err := m.AcmeConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acme_configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acme_configuration")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this inline response 200 40 embedded vhosts based on the context it is used
func (m *InlineResponse20040EmbeddedVhosts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcmeConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse20040EmbeddedVhosts) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20040EmbeddedVhosts) contextValidateAcmeConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.AcmeConfiguration != nil {
		if err := m.AcmeConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acme_configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acme_configuration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse20040EmbeddedVhosts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse20040EmbeddedVhosts) UnmarshalBinary(b []byte) error {
	var res InlineResponse20040EmbeddedVhosts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
