// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InlineResponse20036 inline response 200 36
// swagger:model inline_response_200_36
type InlineResponse20036 struct {

	// resource type
	// Required: true
	ResourceType *string `json:"_type"`

	// links
	// Required: true
	Links *InlineResponse2003EmbeddedEmbeddedLinks `json:"_links"`

	// command
	// Required: true
	Command *string `json:"command"`

	// container count
	// Required: true
	ContainerCount *int64 `json:"container_count"`

	// container memory limit mb
	// Required: true
	ContainerMemoryLimitMb *int64 `json:"container_memory_limit_mb"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// docker ref
	// Required: true
	DockerRef *string `json:"docker_ref"`

	// docker repo
	// Required: true
	DockerRepo *string `json:"docker_repo"`

	// handle
	// Required: true
	Handle *string `json:"handle"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// process type
	// Required: true
	ProcessType *string `json:"process_type"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this inline response 200 36
func (m *InlineResponse20036) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerMemoryLimitMb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDockerRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDockerRepo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse20036) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20036) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20036) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20036) validateContainerCount(formats strfmt.Registry) error {

	if err := validate.Required("container_count", "body", m.ContainerCount); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20036) validateContainerMemoryLimitMb(formats strfmt.Registry) error {

	if err := validate.Required("container_memory_limit_mb", "body", m.ContainerMemoryLimitMb); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20036) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20036) validateDockerRef(formats strfmt.Registry) error {

	if err := validate.Required("docker_ref", "body", m.DockerRef); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20036) validateDockerRepo(formats strfmt.Registry) error {

	if err := validate.Required("docker_repo", "body", m.DockerRepo); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20036) validateHandle(formats strfmt.Registry) error {

	if err := validate.Required("handle", "body", m.Handle); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20036) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20036) validateProcessType(formats strfmt.Registry) error {

	if err := validate.Required("process_type", "body", m.ProcessType); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20036) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse20036) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse20036) UnmarshalBinary(b []byte) error {
	var res InlineResponse20036
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
