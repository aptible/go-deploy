// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InlineResponse200EmbeddedAccounts inline response 200 embedded accounts
//
// swagger:model inline_response_200__embedded_accounts
type InlineResponse200EmbeddedAccounts struct {

	// resource type
	ResourceType string `json:"_type,omitempty"`

	// embedded
	Embedded *InlineResponse200EmbeddedEmbedded `json:"_embedded,omitempty"`

	// links
	Links *InlineResponse200EmbeddedLinks `json:"_links,omitempty"`

	// activated
	Activated bool `json:"activated,omitempty"`

	// app container count
	AppContainerCount int64 `json:"app_container_count,omitempty"`

	// bastion host
	BastionHost *string `json:"bastion_host,omitempty"`

	// bastion port
	BastionPort int64 `json:"bastion_port,omitempty"`

	// ca body
	CaBody *string `json:"ca_body,omitempty"`

	// ca private key
	CaPrivateKey *string `json:"ca_private_key,omitempty"`

	// container count
	ContainerCount int64 `json:"container_count,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// database container count
	DatabaseContainerCount int64 `json:"database_container_count,omitempty"`

	// domain count
	DomainCount int64 `json:"domain_count,omitempty"`

	// gentlemanjerry certificate
	GentlemanjerryCertificate *string `json:"gentlemanjerry_certificate,omitempty"`

	// gentlemanjerry docker name
	GentlemanjerryDockerName *string `json:"gentlemanjerry_docker_name,omitempty"`

	// gentlemanjerry endpoint
	GentlemanjerryEndpoint *string `json:"gentlemanjerry_endpoint,omitempty"`

	// gentlemanjerry instance id
	GentlemanjerryInstanceID *string `json:"gentlemanjerry_instance_id,omitempty"`

	// handle
	Handle string `json:"handle,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// number
	Number string `json:"number,omitempty"`

	// ssh portal port
	SSHPortalPort *int64 `json:"ssh_portal_port,omitempty"`

	// sweetness stack
	SweetnessStack *string `json:"sweetness_stack,omitempty"`

	// sweetness stack version
	// Enum: [v1 v2]
	SweetnessStackVersion *string `json:"sweetness_stack_version,omitempty"`

	// syslog host
	SyslogHost *string `json:"syslog_host,omitempty"`

	// syslog port
	SyslogPort *int64 `json:"syslog_port,omitempty"`

	// total app count
	TotalAppCount int64 `json:"total_app_count,omitempty"`

	// total database count
	TotalDatabaseCount int64 `json:"total_database_count,omitempty"`

	// total disk size
	TotalDiskSize int64 `json:"total_disk_size,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this inline response 200 embedded accounts
func (m *InlineResponse200EmbeddedAccounts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSweetnessStackVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse200EmbeddedAccounts) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(m.Embedded) { // not required
		return nil
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedAccounts) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

var inlineResponse200EmbeddedAccountsTypeSweetnessStackVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["v1","v2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inlineResponse200EmbeddedAccountsTypeSweetnessStackVersionPropEnum = append(inlineResponse200EmbeddedAccountsTypeSweetnessStackVersionPropEnum, v)
	}
}

const (

	// InlineResponse200EmbeddedAccountsSweetnessStackVersionV1 captures enum value "v1"
	InlineResponse200EmbeddedAccountsSweetnessStackVersionV1 string = "v1"

	// InlineResponse200EmbeddedAccountsSweetnessStackVersionV2 captures enum value "v2"
	InlineResponse200EmbeddedAccountsSweetnessStackVersionV2 string = "v2"
)

// prop value enum
func (m *InlineResponse200EmbeddedAccounts) validateSweetnessStackVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, inlineResponse200EmbeddedAccountsTypeSweetnessStackVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InlineResponse200EmbeddedAccounts) validateSweetnessStackVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.SweetnessStackVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateSweetnessStackVersionEnum("sweetness_stack_version", "body", *m.SweetnessStackVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this inline response 200 embedded accounts based on the context it is used
func (m *InlineResponse200EmbeddedAccounts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse200EmbeddedAccounts) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if m.Embedded != nil {
		if err := m.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse200EmbeddedAccounts) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse200EmbeddedAccounts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse200EmbeddedAccounts) UnmarshalBinary(b []byte) error {
	var res InlineResponse200EmbeddedAccounts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
