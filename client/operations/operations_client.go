// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAccountsID deletes account
*/
func (a *Client) DeleteAccountsID(params *DeleteAccountsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccountsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccountsID",
		Method:             "DELETE",
		PathPattern:        "/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccountsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAccountsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAppsID deletes app
*/
func (a *Client) DeleteAppsID(params *DeleteAppsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAppsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAppsID",
		Method:             "DELETE",
		PathPattern:        "/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAppsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAppsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAppsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteBackupRetentionPoliciesID deletes backup retention policy
*/
func (a *Client) DeleteBackupRetentionPoliciesID(params *DeleteBackupRetentionPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteBackupRetentionPoliciesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBackupRetentionPoliciesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBackupRetentionPoliciesID",
		Method:             "DELETE",
		PathPattern:        "/backup_retention_policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBackupRetentionPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBackupRetentionPoliciesIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBackupRetentionPoliciesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCertificatesID deletes certificate
*/
func (a *Client) DeleteCertificatesID(params *DeleteCertificatesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCertificatesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCertificatesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCertificatesID",
		Method:             "DELETE",
		PathPattern:        "/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCertificatesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCertificatesIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCertificatesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteConfigurationsID deletes configuration
*/
func (a *Client) DeleteConfigurationsID(params *DeleteConfigurationsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteConfigurationsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConfigurationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteConfigurationsID",
		Method:             "DELETE",
		PathPattern:        "/configurations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteConfigurationsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConfigurationsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteConfigurationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDatabasesID deletes database
*/
func (a *Client) DeleteDatabasesID(params *DeleteDatabasesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDatabasesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatabasesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDatabasesID",
		Method:             "DELETE",
		PathPattern:        "/databases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDatabasesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatabasesIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDatabasesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteLogDrainsID deletes log drain
*/
func (a *Client) DeleteLogDrainsID(params *DeleteLogDrainsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLogDrainsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLogDrainsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLogDrainsID",
		Method:             "DELETE",
		PathPattern:        "/log_drains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLogDrainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLogDrainsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLogDrainsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeletePermissionsID deletes permission
*/
func (a *Client) DeletePermissionsID(params *DeletePermissionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePermissionsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePermissionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePermissionsID",
		Method:             "DELETE",
		PathPattern:        "/permissions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePermissionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePermissionsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePermissionsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteVhostsID deletes vhost
*/
func (a *Client) DeleteVhostsID(params *DeleteVhostsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVhostsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVhostsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVhostsID",
		Method:             "DELETE",
		PathPattern:        "/vhosts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVhostsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVhostsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteVhostsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Get shows home
*/
func (a *Client) Get(params *GetParams, authInfo runtime.ClientAuthInfoWriter) (*GetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccounts lists accounts
*/
func (a *Client) GetAccounts(params *GetAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccounts",
		Method:             "GET",
		PathPattern:        "/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDActivityReports lists activity reports
*/
func (a *Client) GetAccountsAccountIDActivityReports(params *GetAccountsAccountIDActivityReportsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDActivityReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDActivityReportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDActivityReports",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/activity_reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDActivityReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDActivityReportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDActivityReportsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDApps lists apps
*/
func (a *Client) GetAccountsAccountIDApps(params *GetAccountsAccountIDAppsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDApps",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDAppsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDAppsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDAppsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDBackupRetentionPolicies lists backup retention policies
*/
func (a *Client) GetAccountsAccountIDBackupRetentionPolicies(params *GetAccountsAccountIDBackupRetentionPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDBackupRetentionPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDBackupRetentionPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDBackupRetentionPolicies",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/backup_retention_policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDBackupRetentionPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDBackupRetentionPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDBackupRetentionPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDBackups lists backups
*/
func (a *Client) GetAccountsAccountIDBackups(params *GetAccountsAccountIDBackupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDBackupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDBackups",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDBackupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDBackupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDCertificates lists certificates
*/
func (a *Client) GetAccountsAccountIDCertificates(params *GetAccountsAccountIDCertificatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDCertificatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDCertificates",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDCertificatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDCertificatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDDatabases lists databases
*/
func (a *Client) GetAccountsAccountIDDatabases(params *GetAccountsAccountIDDatabasesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDDatabasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDDatabasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDDatabases",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/databases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDDatabasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDDatabasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDDatabasesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDDisks lists disks
*/
func (a *Client) GetAccountsAccountIDDisks(params *GetAccountsAccountIDDisksParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDDisksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDDisks",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/disks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDDisksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDDisksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDDisksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDLogDrains lists log drains
*/
func (a *Client) GetAccountsAccountIDLogDrains(params *GetAccountsAccountIDLogDrainsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDLogDrainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDLogDrainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDLogDrains",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/log_drains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDLogDrainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDLogDrainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDLogDrainsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDMetricDrains lists metric drains
*/
func (a *Client) GetAccountsAccountIDMetricDrains(params *GetAccountsAccountIDMetricDrainsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDMetricDrainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDMetricDrainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDMetricDrains",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/metric_drains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDMetricDrainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDMetricDrainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDMetricDrainsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDOperations lists operations
*/
func (a *Client) GetAccountsAccountIDOperations(params *GetAccountsAccountIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDOperations",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDPermissions lists permissions
*/
func (a *Client) GetAccountsAccountIDPermissions(params *GetAccountsAccountIDPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDPermissions",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDPermissionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDServices lists services
*/
func (a *Client) GetAccountsAccountIDServices(params *GetAccountsAccountIDServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDServices",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsAccountIDVhosts lists vhosts
*/
func (a *Client) GetAccountsAccountIDVhosts(params *GetAccountsAccountIDVhostsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsAccountIDVhostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsAccountIDVhostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsAccountIDVhosts",
		Method:             "GET",
		PathPattern:        "/accounts/{account_id}/vhosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsAccountIDVhostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsAccountIDVhostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsAccountIDVhostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountsID shows account
*/
func (a *Client) GetAccountsID(params *GetAccountsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsID",
		Method:             "GET",
		PathPattern:        "/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetActivityReportsActivityReportIDDownload downloads activity report
*/
func (a *Client) GetActivityReportsActivityReportIDDownload(params *GetActivityReportsActivityReportIDDownloadParams, authInfo runtime.ClientAuthInfoWriter) (*GetActivityReportsActivityReportIDDownloadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActivityReportsActivityReportIDDownloadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetActivityReportsActivityReportIDDownload",
		Method:             "GET",
		PathPattern:        "/activity_reports/{activity_report_id}/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActivityReportsActivityReportIDDownloadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActivityReportsActivityReportIDDownloadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetActivityReportsActivityReportIDDownloadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetActivityReportsID shows activity report
*/
func (a *Client) GetActivityReportsID(params *GetActivityReportsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetActivityReportsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActivityReportsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetActivityReportsID",
		Method:             "GET",
		PathPattern:        "/activity_reports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActivityReportsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActivityReportsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetActivityReportsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetApps lists apps
*/
func (a *Client) GetApps(params *GetAppsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApps",
		Method:             "GET",
		PathPattern:        "/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAppsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAppsAppIDConfigurations lists configurations
*/
func (a *Client) GetAppsAppIDConfigurations(params *GetAppsAppIDConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppsAppIDConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsAppIDConfigurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppsAppIDConfigurations",
		Method:             "GET",
		PathPattern:        "/apps/{app_id}/configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppsAppIDConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppsAppIDConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAppsAppIDConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAppsAppIDEphemeralSessions lists ephemeral sessions
*/
func (a *Client) GetAppsAppIDEphemeralSessions(params *GetAppsAppIDEphemeralSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppsAppIDEphemeralSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsAppIDEphemeralSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppsAppIDEphemeralSessions",
		Method:             "GET",
		PathPattern:        "/apps/{app_id}/ephemeral_sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppsAppIDEphemeralSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppsAppIDEphemeralSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAppsAppIDEphemeralSessionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAppsAppIDImages lists images
*/
func (a *Client) GetAppsAppIDImages(params *GetAppsAppIDImagesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppsAppIDImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsAppIDImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppsAppIDImages",
		Method:             "GET",
		PathPattern:        "/apps/{app_id}/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppsAppIDImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppsAppIDImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAppsAppIDImagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAppsAppIDOperations lists operations
*/
func (a *Client) GetAppsAppIDOperations(params *GetAppsAppIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppsAppIDOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsAppIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppsAppIDOperations",
		Method:             "GET",
		PathPattern:        "/apps/{app_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppsAppIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppsAppIDOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAppsAppIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAppsAppIDServices lists services
*/
func (a *Client) GetAppsAppIDServices(params *GetAppsAppIDServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppsAppIDServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsAppIDServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppsAppIDServices",
		Method:             "GET",
		PathPattern:        "/apps/{app_id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppsAppIDServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppsAppIDServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAppsAppIDServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAppsAppIDVhosts lists vhosts
*/
func (a *Client) GetAppsAppIDVhosts(params *GetAppsAppIDVhostsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppsAppIDVhostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsAppIDVhostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppsAppIDVhosts",
		Method:             "GET",
		PathPattern:        "/apps/{app_id}/vhosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppsAppIDVhostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppsAppIDVhostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAppsAppIDVhostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAppsID shows app
*/
func (a *Client) GetAppsID(params *GetAppsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppsID",
		Method:             "GET",
		PathPattern:        "/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAppsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBackupRetentionPoliciesID shows backup retention policy
*/
func (a *Client) GetBackupRetentionPoliciesID(params *GetBackupRetentionPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetBackupRetentionPoliciesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupRetentionPoliciesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBackupRetentionPoliciesID",
		Method:             "GET",
		PathPattern:        "/backup_retention_policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackupRetentionPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupRetentionPoliciesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBackupRetentionPoliciesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBackupsBackupIDCopies lists backups
*/
func (a *Client) GetBackupsBackupIDCopies(params *GetBackupsBackupIDCopiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetBackupsBackupIDCopiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupsBackupIDCopiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBackupsBackupIDCopies",
		Method:             "GET",
		PathPattern:        "/backups/{backup_id}/copies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackupsBackupIDCopiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupsBackupIDCopiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBackupsBackupIDCopiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBackupsBackupIDOperations lists operations
*/
func (a *Client) GetBackupsBackupIDOperations(params *GetBackupsBackupIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetBackupsBackupIDOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupsBackupIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBackupsBackupIDOperations",
		Method:             "GET",
		PathPattern:        "/backups/{backup_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackupsBackupIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupsBackupIDOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBackupsBackupIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBackupsID shows backup
*/
func (a *Client) GetBackupsID(params *GetBackupsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetBackupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBackupsID",
		Method:             "GET",
		PathPattern:        "/backups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackupsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBackupsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCertificatesCertificateIDApps lists apps
*/
func (a *Client) GetCertificatesCertificateIDApps(params *GetCertificatesCertificateIDAppsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificatesCertificateIDAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificatesCertificateIDAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCertificatesCertificateIDApps",
		Method:             "GET",
		PathPattern:        "/certificates/{certificate_id}/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCertificatesCertificateIDAppsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificatesCertificateIDAppsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCertificatesCertificateIDAppsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCertificatesCertificateIDVhosts lists vhosts
*/
func (a *Client) GetCertificatesCertificateIDVhosts(params *GetCertificatesCertificateIDVhostsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificatesCertificateIDVhostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificatesCertificateIDVhostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCertificatesCertificateIDVhosts",
		Method:             "GET",
		PathPattern:        "/certificates/{certificate_id}/vhosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCertificatesCertificateIDVhostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificatesCertificateIDVhostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCertificatesCertificateIDVhostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCertificatesID shows certificate
*/
func (a *Client) GetCertificatesID(params *GetCertificatesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCertificatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificatesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCertificatesID",
		Method:             "GET",
		PathPattern:        "/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCertificatesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificatesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCertificatesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetConfigurationsID shows configuration
*/
func (a *Client) GetConfigurationsID(params *GetConfigurationsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigurationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigurationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetConfigurationsID",
		Method:             "GET",
		PathPattern:        "/configurations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigurationsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigurationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetConfigurationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetContainersID shows container
*/
func (a *Client) GetContainersID(params *GetContainersIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetContainersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContainersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContainersID",
		Method:             "GET",
		PathPattern:        "/containers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContainersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContainersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetContainersIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabaseCredentialsDatabaseCredentialIDOperations lists operations
*/
func (a *Client) GetDatabaseCredentialsDatabaseCredentialIDOperations(params *GetDatabaseCredentialsDatabaseCredentialIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabaseCredentialsDatabaseCredentialIDOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabaseCredentialsDatabaseCredentialIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabaseCredentialsDatabaseCredentialIDOperations",
		Method:             "GET",
		PathPattern:        "/database_credentials/{database_credential_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabaseCredentialsDatabaseCredentialIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabaseCredentialsDatabaseCredentialIDOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabaseCredentialsDatabaseCredentialIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabaseCredentialsID shows database credential
*/
func (a *Client) GetDatabaseCredentialsID(params *GetDatabaseCredentialsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabaseCredentialsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabaseCredentialsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabaseCredentialsID",
		Method:             "GET",
		PathPattern:        "/database_credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabaseCredentialsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabaseCredentialsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabaseCredentialsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabaseImages lists database images
*/
func (a *Client) GetDatabaseImages(params *GetDatabaseImagesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabaseImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabaseImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabaseImages",
		Method:             "GET",
		PathPattern:        "/database_images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabaseImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabaseImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabaseImagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabaseImagesID shows database image
*/
func (a *Client) GetDatabaseImagesID(params *GetDatabaseImagesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabaseImagesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabaseImagesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabaseImagesID",
		Method:             "GET",
		PathPattern:        "/database_images/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabaseImagesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabaseImagesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabaseImagesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabases lists databases
*/
func (a *Client) GetDatabases(params *GetDatabasesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabases",
		Method:             "GET",
		PathPattern:        "/databases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabasesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabasesDatabaseIDBackups lists backups
*/
func (a *Client) GetDatabasesDatabaseIDBackups(params *GetDatabasesDatabaseIDBackupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabasesDatabaseIDBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabasesDatabaseIDBackupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabasesDatabaseIDBackups",
		Method:             "GET",
		PathPattern:        "/databases/{database_id}/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabasesDatabaseIDBackupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabasesDatabaseIDBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabasesDatabaseIDBackupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabasesDatabaseIDConfigurations lists configurations
*/
func (a *Client) GetDatabasesDatabaseIDConfigurations(params *GetDatabasesDatabaseIDConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabasesDatabaseIDConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabasesDatabaseIDConfigurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabasesDatabaseIDConfigurations",
		Method:             "GET",
		PathPattern:        "/databases/{database_id}/configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabasesDatabaseIDConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabasesDatabaseIDConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabasesDatabaseIDConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabasesDatabaseIDDatabaseCredentials lists database credentials
*/
func (a *Client) GetDatabasesDatabaseIDDatabaseCredentials(params *GetDatabasesDatabaseIDDatabaseCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabasesDatabaseIDDatabaseCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabasesDatabaseIDDatabaseCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabasesDatabaseIDDatabaseCredentials",
		Method:             "GET",
		PathPattern:        "/databases/{database_id}/database_credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabasesDatabaseIDDatabaseCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabasesDatabaseIDDatabaseCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabasesDatabaseIDDatabaseCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabasesDatabaseIDDatabaseImagesID shows database image
*/
func (a *Client) GetDatabasesDatabaseIDDatabaseImagesID(params *GetDatabasesDatabaseIDDatabaseImagesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabasesDatabaseIDDatabaseImagesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabasesDatabaseIDDatabaseImagesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabasesDatabaseIDDatabaseImagesID",
		Method:             "GET",
		PathPattern:        "/databases/{database_id}/database_images/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabasesDatabaseIDDatabaseImagesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabasesDatabaseIDDatabaseImagesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabasesDatabaseIDDatabaseImagesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabasesDatabaseIDDependents lists databases
*/
func (a *Client) GetDatabasesDatabaseIDDependents(params *GetDatabasesDatabaseIDDependentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabasesDatabaseIDDependentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabasesDatabaseIDDependentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabasesDatabaseIDDependents",
		Method:             "GET",
		PathPattern:        "/databases/{database_id}/dependents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabasesDatabaseIDDependentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabasesDatabaseIDDependentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabasesDatabaseIDDependentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabasesDatabaseIDOperations lists operations
*/
func (a *Client) GetDatabasesDatabaseIDOperations(params *GetDatabasesDatabaseIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabasesDatabaseIDOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabasesDatabaseIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabasesDatabaseIDOperations",
		Method:             "GET",
		PathPattern:        "/databases/{database_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabasesDatabaseIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabasesDatabaseIDOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabasesDatabaseIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatabasesID shows database
*/
func (a *Client) GetDatabasesID(params *GetDatabasesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDatabasesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabasesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDatabasesID",
		Method:             "GET",
		PathPattern:        "/databases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabasesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabasesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatabasesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDisksID shows disk
*/
func (a *Client) GetDisksID(params *GetDisksIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDisksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDisksIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDisksID",
		Method:             "GET",
		PathPattern:        "/disks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDisksIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDisksIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDisksIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEphemeralContainersID shows ephemeral container
*/
func (a *Client) GetEphemeralContainersID(params *GetEphemeralContainersIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEphemeralContainersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEphemeralContainersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEphemeralContainersID",
		Method:             "GET",
		PathPattern:        "/ephemeral_containers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEphemeralContainersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEphemeralContainersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEphemeralContainersIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEphemeralSessionsEphemeralSessionIDEphemeralContainers lists ephemeral containers
*/
func (a *Client) GetEphemeralSessionsEphemeralSessionIDEphemeralContainers(params *GetEphemeralSessionsEphemeralSessionIDEphemeralContainersParams, authInfo runtime.ClientAuthInfoWriter) (*GetEphemeralSessionsEphemeralSessionIDEphemeralContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEphemeralSessionsEphemeralSessionIDEphemeralContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEphemeralSessionsEphemeralSessionIDEphemeralContainers",
		Method:             "GET",
		PathPattern:        "/ephemeral_sessions/{ephemeral_session_id}/ephemeral_containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEphemeralSessionsEphemeralSessionIDEphemeralContainersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEphemeralSessionsEphemeralSessionIDEphemeralContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEphemeralSessionsEphemeralSessionIDEphemeralContainersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEphemeralSessionsEphemeralSessionIDOperations lists operations
*/
func (a *Client) GetEphemeralSessionsEphemeralSessionIDOperations(params *GetEphemeralSessionsEphemeralSessionIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEphemeralSessionsEphemeralSessionIDOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEphemeralSessionsEphemeralSessionIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEphemeralSessionsEphemeralSessionIDOperations",
		Method:             "GET",
		PathPattern:        "/ephemeral_sessions/{ephemeral_session_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEphemeralSessionsEphemeralSessionIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEphemeralSessionsEphemeralSessionIDOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEphemeralSessionsEphemeralSessionIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEphemeralSessionsID shows ephemeral session
*/
func (a *Client) GetEphemeralSessionsID(params *GetEphemeralSessionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEphemeralSessionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEphemeralSessionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEphemeralSessionsID",
		Method:             "GET",
		PathPattern:        "/ephemeral_sessions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEphemeralSessionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEphemeralSessionsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEphemeralSessionsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetImagesID shows image
*/
func (a *Client) GetImagesID(params *GetImagesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetImagesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetImagesID",
		Method:             "GET",
		PathPattern:        "/images/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImagesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImagesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetImagesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetImagesImageIDOperations lists operations
*/
func (a *Client) GetImagesImageIDOperations(params *GetImagesImageIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetImagesImageIDOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesImageIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetImagesImageIDOperations",
		Method:             "GET",
		PathPattern:        "/images/{image_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImagesImageIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImagesImageIDOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetImagesImageIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIntrusionDetectionReportsID shows intrusion detection report
*/
func (a *Client) GetIntrusionDetectionReportsID(params *GetIntrusionDetectionReportsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntrusionDetectionReportsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntrusionDetectionReportsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIntrusionDetectionReportsID",
		Method:             "GET",
		PathPattern:        "/intrusion_detection_reports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntrusionDetectionReportsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntrusionDetectionReportsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntrusionDetectionReportsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIntrusionDetectionReportsIntrusionReportIDDownloadCsv downloads csv intrusion detection report
*/
func (a *Client) GetIntrusionDetectionReportsIntrusionReportIDDownloadCsv(params *GetIntrusionDetectionReportsIntrusionReportIDDownloadCsvParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntrusionDetectionReportsIntrusionReportIDDownloadCsvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntrusionDetectionReportsIntrusionReportIDDownloadCsvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIntrusionDetectionReportsIntrusionReportIDDownloadCsv",
		Method:             "GET",
		PathPattern:        "/intrusion_detection_reports/{intrusion_report_id}/download_csv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntrusionDetectionReportsIntrusionReportIDDownloadCsvReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntrusionDetectionReportsIntrusionReportIDDownloadCsvOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntrusionDetectionReportsIntrusionReportIDDownloadCsvDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIntrusionDetectionReportsIntrusionReportIDDownloadPdf downloads pdf intrusion detection report
*/
func (a *Client) GetIntrusionDetectionReportsIntrusionReportIDDownloadPdf(params *GetIntrusionDetectionReportsIntrusionReportIDDownloadPdfParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntrusionDetectionReportsIntrusionReportIDDownloadPdfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntrusionDetectionReportsIntrusionReportIDDownloadPdfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIntrusionDetectionReportsIntrusionReportIDDownloadPdf",
		Method:             "GET",
		PathPattern:        "/intrusion_detection_reports/{intrusion_report_id}/download_pdf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntrusionDetectionReportsIntrusionReportIDDownloadPdfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntrusionDetectionReportsIntrusionReportIDDownloadPdfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntrusionDetectionReportsIntrusionReportIDDownloadPdfDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLogDrainsID shows log drain
*/
func (a *Client) GetLogDrainsID(params *GetLogDrainsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLogDrainsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogDrainsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLogDrainsID",
		Method:             "GET",
		PathPattern:        "/log_drains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLogDrainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogDrainsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLogDrainsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLogDrainsLogDrainIDContainers lists containers
*/
func (a *Client) GetLogDrainsLogDrainIDContainers(params *GetLogDrainsLogDrainIDContainersParams, authInfo runtime.ClientAuthInfoWriter) (*GetLogDrainsLogDrainIDContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogDrainsLogDrainIDContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLogDrainsLogDrainIDContainers",
		Method:             "GET",
		PathPattern:        "/log_drains/{log_drain_id}/containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLogDrainsLogDrainIDContainersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogDrainsLogDrainIDContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLogDrainsLogDrainIDContainersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLogDrainsLogDrainIDEphemeralContainers lists ephemeral containers
*/
func (a *Client) GetLogDrainsLogDrainIDEphemeralContainers(params *GetLogDrainsLogDrainIDEphemeralContainersParams, authInfo runtime.ClientAuthInfoWriter) (*GetLogDrainsLogDrainIDEphemeralContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogDrainsLogDrainIDEphemeralContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLogDrainsLogDrainIDEphemeralContainers",
		Method:             "GET",
		PathPattern:        "/log_drains/{log_drain_id}/ephemeral_containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLogDrainsLogDrainIDEphemeralContainersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogDrainsLogDrainIDEphemeralContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLogDrainsLogDrainIDEphemeralContainersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLogDrainsLogDrainIDOperations lists operations
*/
func (a *Client) GetLogDrainsLogDrainIDOperations(params *GetLogDrainsLogDrainIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLogDrainsLogDrainIDOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogDrainsLogDrainIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLogDrainsLogDrainIDOperations",
		Method:             "GET",
		PathPattern:        "/log_drains/{log_drain_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLogDrainsLogDrainIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogDrainsLogDrainIDOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLogDrainsLogDrainIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMetricDrainsID shows metric drain
*/
func (a *Client) GetMetricDrainsID(params *GetMetricDrainsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetricDrainsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricDrainsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMetricDrainsID",
		Method:             "GET",
		PathPattern:        "/metric_drains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetricDrainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetricDrainsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMetricDrainsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMetricDrainsMetricDrainIDContainers lists containers
*/
func (a *Client) GetMetricDrainsMetricDrainIDContainers(params *GetMetricDrainsMetricDrainIDContainersParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetricDrainsMetricDrainIDContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricDrainsMetricDrainIDContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMetricDrainsMetricDrainIDContainers",
		Method:             "GET",
		PathPattern:        "/metric_drains/{metric_drain_id}/containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetricDrainsMetricDrainIDContainersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetricDrainsMetricDrainIDContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMetricDrainsMetricDrainIDContainersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMetricDrainsMetricDrainIDOperations lists operations
*/
func (a *Client) GetMetricDrainsMetricDrainIDOperations(params *GetMetricDrainsMetricDrainIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetricDrainsMetricDrainIDOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricDrainsMetricDrainIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMetricDrainsMetricDrainIDOperations",
		Method:             "GET",
		PathPattern:        "/metric_drains/{metric_drain_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetricDrainsMetricDrainIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetricDrainsMetricDrainIDOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMetricDrainsMetricDrainIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetOperationsID shows operation
*/
func (a *Client) GetOperationsID(params *GetOperationsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetOperationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOperationsID",
		Method:             "GET",
		PathPattern:        "/operations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOperationsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOperationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOperationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetOperationsOperationIDEphemeralSessions lists ephemeral sessions
*/
func (a *Client) GetOperationsOperationIDEphemeralSessions(params *GetOperationsOperationIDEphemeralSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOperationsOperationIDEphemeralSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperationsOperationIDEphemeralSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOperationsOperationIDEphemeralSessions",
		Method:             "GET",
		PathPattern:        "/operations/{operation_id}/ephemeral_sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOperationsOperationIDEphemeralSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOperationsOperationIDEphemeralSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOperationsOperationIDEphemeralSessionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetOperationsOperationIDSSHPortalConnections lists ssh portal connections
*/
func (a *Client) GetOperationsOperationIDSSHPortalConnections(params *GetOperationsOperationIDSSHPortalConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOperationsOperationIDSSHPortalConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperationsOperationIDSSHPortalConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOperationsOperationIDSSHPortalConnections",
		Method:             "GET",
		PathPattern:        "/operations/{operation_id}/ssh_portal_connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOperationsOperationIDSSHPortalConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOperationsOperationIDSSHPortalConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOperationsOperationIDSSHPortalConnectionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPermissions lists permissions
*/
func (a *Client) GetPermissions(params *GetPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPermissions",
		Method:             "GET",
		PathPattern:        "/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPermissionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPermissionsID shows permission
*/
func (a *Client) GetPermissionsID(params *GetPermissionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPermissionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPermissionsID",
		Method:             "GET",
		PathPattern:        "/permissions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPermissionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPermissionsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPermissionsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetReleasesID shows release
*/
func (a *Client) GetReleasesID(params *GetReleasesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleasesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleasesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetReleasesID",
		Method:             "GET",
		PathPattern:        "/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReleasesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleasesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetReleasesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetReleasesReleaseIDContainers lists containers
*/
func (a *Client) GetReleasesReleaseIDContainers(params *GetReleasesReleaseIDContainersParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleasesReleaseIDContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleasesReleaseIDContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetReleasesReleaseIDContainers",
		Method:             "GET",
		PathPattern:        "/releases/{release_id}/containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReleasesReleaseIDContainersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReleasesReleaseIDContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetReleasesReleaseIDContainersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSSHPortalConnectionsID shows ssh portal connection
*/
func (a *Client) GetSSHPortalConnectionsID(params *GetSSHPortalConnectionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSSHPortalConnectionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSSHPortalConnectionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSSHPortalConnectionsID",
		Method:             "GET",
		PathPattern:        "/ssh_portal_connections/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSSHPortalConnectionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSSHPortalConnectionsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSSHPortalConnectionsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServicesID shows service
*/
func (a *Client) GetServicesID(params *GetServicesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesID",
		Method:             "GET",
		PathPattern:        "/services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServicesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServicesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServicesServiceIDOperations lists operations
*/
func (a *Client) GetServicesServiceIDOperations(params *GetServicesServiceIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesServiceIDOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesServiceIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesServiceIDOperations",
		Method:             "GET",
		PathPattern:        "/services/{service_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServicesServiceIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesServiceIDOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServicesServiceIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServicesServiceIDReleases lists releases
*/
func (a *Client) GetServicesServiceIDReleases(params *GetServicesServiceIDReleasesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesServiceIDReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesServiceIDReleasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesServiceIDReleases",
		Method:             "GET",
		PathPattern:        "/services/{service_id}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServicesServiceIDReleasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesServiceIDReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServicesServiceIDReleasesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServicesServiceIDVhosts lists vhosts
*/
func (a *Client) GetServicesServiceIDVhosts(params *GetServicesServiceIDVhostsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesServiceIDVhostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesServiceIDVhostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesServiceIDVhosts",
		Method:             "GET",
		PathPattern:        "/services/{service_id}/vhosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServicesServiceIDVhostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesServiceIDVhostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServicesServiceIDVhostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStacks lists stacks
*/
func (a *Client) GetStacks(params *GetStacksParams, authInfo runtime.ClientAuthInfoWriter) (*GetStacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStacks",
		Method:             "GET",
		PathPattern:        "/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStacksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStacksID shows stack
*/
func (a *Client) GetStacksID(params *GetStacksIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetStacksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStacksIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStacksID",
		Method:             "GET",
		PathPattern:        "/stacks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStacksIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStacksIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStacksIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStacksStackIDAccounts lists accounts
*/
func (a *Client) GetStacksStackIDAccounts(params *GetStacksStackIDAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStacksStackIDAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStacksStackIDAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStacksStackIDAccounts",
		Method:             "GET",
		PathPattern:        "/stacks/{stack_id}/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStacksStackIDAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStacksStackIDAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStacksStackIDAccountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStacksStackIDIntrusionDetectionReports lists intrusion detection reports
*/
func (a *Client) GetStacksStackIDIntrusionDetectionReports(params *GetStacksStackIDIntrusionDetectionReportsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStacksStackIDIntrusionDetectionReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStacksStackIDIntrusionDetectionReportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStacksStackIDIntrusionDetectionReports",
		Method:             "GET",
		PathPattern:        "/stacks/{stack_id}/intrusion_detection_reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStacksStackIDIntrusionDetectionReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStacksStackIDIntrusionDetectionReportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStacksStackIDIntrusionDetectionReportsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStacksStackIDVpcPeers lists vpc peers
*/
func (a *Client) GetStacksStackIDVpcPeers(params *GetStacksStackIDVpcPeersParams, authInfo runtime.ClientAuthInfoWriter) (*GetStacksStackIDVpcPeersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStacksStackIDVpcPeersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStacksStackIDVpcPeers",
		Method:             "GET",
		PathPattern:        "/stacks/{stack_id}/vpc_peers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStacksStackIDVpcPeersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStacksStackIDVpcPeersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStacksStackIDVpcPeersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStacksStackIDVpnTunnels lists vpn tunnels
*/
func (a *Client) GetStacksStackIDVpnTunnels(params *GetStacksStackIDVpnTunnelsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStacksStackIDVpnTunnelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStacksStackIDVpnTunnelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStacksStackIDVpnTunnels",
		Method:             "GET",
		PathPattern:        "/stacks/{stack_id}/vpn_tunnels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStacksStackIDVpnTunnelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStacksStackIDVpnTunnelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStacksStackIDVpnTunnelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetVhostsID shows vhost
*/
func (a *Client) GetVhostsID(params *GetVhostsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVhostsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVhostsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVhostsID",
		Method:             "GET",
		PathPattern:        "/vhosts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVhostsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVhostsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVhostsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetVhostsVhostIDOperations lists operations
*/
func (a *Client) GetVhostsVhostIDOperations(params *GetVhostsVhostIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVhostsVhostIDOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVhostsVhostIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVhostsVhostIDOperations",
		Method:             "GET",
		PathPattern:        "/vhosts/{vhost_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVhostsVhostIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVhostsVhostIDOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVhostsVhostIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetVpcPeersID shows vpc peer
*/
func (a *Client) GetVpcPeersID(params *GetVpcPeersIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpcPeersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpcPeersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpcPeersID",
		Method:             "GET",
		PathPattern:        "/vpc_peers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVpcPeersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVpcPeersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVpcPeersIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetVpnTunnelsID shows vpn tunnel
*/
func (a *Client) GetVpnTunnelsID(params *GetVpnTunnelsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpnTunnelsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpnTunnelsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpnTunnelsID",
		Method:             "GET",
		PathPattern:        "/vpn_tunnels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVpnTunnelsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVpnTunnelsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetVpnTunnelsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchAccountsID updates account
*/
func (a *Client) PatchAccountsID(params *PatchAccountsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAccountsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAccountsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAccountsID",
		Method:             "PATCH",
		PathPattern:        "/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAccountsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAccountsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchAccountsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchAppsID updates app
*/
func (a *Client) PatchAppsID(params *PatchAppsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAppsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAppsID",
		Method:             "PATCH",
		PathPattern:        "/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAppsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchAppsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchCertificatesID updates certificate
*/
func (a *Client) PatchCertificatesID(params *PatchCertificatesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchCertificatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCertificatesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchCertificatesID",
		Method:             "PATCH",
		PathPattern:        "/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCertificatesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCertificatesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchCertificatesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchDatabasesID updates database
*/
func (a *Client) PatchDatabasesID(params *PatchDatabasesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchDatabasesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDatabasesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchDatabasesID",
		Method:             "PATCH",
		PathPattern:        "/databases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDatabasesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDatabasesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchDatabasesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchLogDrainsID updates log drain
*/
func (a *Client) PatchLogDrainsID(params *PatchLogDrainsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchLogDrainsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLogDrainsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLogDrainsID",
		Method:             "PATCH",
		PathPattern:        "/log_drains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLogDrainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLogDrainsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchLogDrainsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchOperationsID updates operation
*/
func (a *Client) PatchOperationsID(params *PatchOperationsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchOperationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchOperationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchOperationsID",
		Method:             "PATCH",
		PathPattern:        "/operations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchOperationsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchOperationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchOperationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchVhostsID updates vhost
*/
func (a *Client) PatchVhostsID(params *PatchVhostsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchVhostsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchVhostsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchVhostsID",
		Method:             "PATCH",
		PathPattern:        "/vhosts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchVhostsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchVhostsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchVhostsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAccounts creates account
*/
func (a *Client) PostAccounts(params *PostAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccounts",
		Method:             "POST",
		PathPattern:        "/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAccountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAccountsAccountIDApps creates app
*/
func (a *Client) PostAccountsAccountIDApps(params *PostAccountsAccountIDAppsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountsAccountIDAppsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountsAccountIDAppsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountsAccountIDApps",
		Method:             "POST",
		PathPattern:        "/accounts/{account_id}/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountsAccountIDAppsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountsAccountIDAppsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAccountsAccountIDAppsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAccountsAccountIDBackupRetentionPolicies creates backup retention policy
*/
func (a *Client) PostAccountsAccountIDBackupRetentionPolicies(params *PostAccountsAccountIDBackupRetentionPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountsAccountIDBackupRetentionPoliciesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountsAccountIDBackupRetentionPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountsAccountIDBackupRetentionPolicies",
		Method:             "POST",
		PathPattern:        "/accounts/{account_id}/backup_retention_policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountsAccountIDBackupRetentionPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountsAccountIDBackupRetentionPoliciesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAccountsAccountIDBackupRetentionPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAccountsAccountIDCertificates creates certificate
*/
func (a *Client) PostAccountsAccountIDCertificates(params *PostAccountsAccountIDCertificatesParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountsAccountIDCertificatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountsAccountIDCertificatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountsAccountIDCertificates",
		Method:             "POST",
		PathPattern:        "/accounts/{account_id}/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountsAccountIDCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountsAccountIDCertificatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAccountsAccountIDCertificatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAccountsAccountIDClaimsType creates claim

You do not need to invoke this directly. Reserves a handle
*/
func (a *Client) PostAccountsAccountIDClaimsType(params *PostAccountsAccountIDClaimsTypeParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountsAccountIDClaimsTypeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountsAccountIDClaimsTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountsAccountIDClaimsType",
		Method:             "POST",
		PathPattern:        "/accounts/{account_id}/claims/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountsAccountIDClaimsTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountsAccountIDClaimsTypeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAccountsAccountIDClaimsTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAccountsAccountIDDatabases creates database
*/
func (a *Client) PostAccountsAccountIDDatabases(params *PostAccountsAccountIDDatabasesParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountsAccountIDDatabasesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountsAccountIDDatabasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountsAccountIDDatabases",
		Method:             "POST",
		PathPattern:        "/accounts/{account_id}/databases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountsAccountIDDatabasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountsAccountIDDatabasesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAccountsAccountIDDatabasesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAccountsAccountIDLogDrains creates log drain
*/
func (a *Client) PostAccountsAccountIDLogDrains(params *PostAccountsAccountIDLogDrainsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountsAccountIDLogDrainsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountsAccountIDLogDrainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountsAccountIDLogDrains",
		Method:             "POST",
		PathPattern:        "/accounts/{account_id}/log_drains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountsAccountIDLogDrainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountsAccountIDLogDrainsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAccountsAccountIDLogDrainsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAccountsAccountIDMetricDrains creates metric drain
*/
func (a *Client) PostAccountsAccountIDMetricDrains(params *PostAccountsAccountIDMetricDrainsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountsAccountIDMetricDrainsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountsAccountIDMetricDrainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountsAccountIDMetricDrains",
		Method:             "POST",
		PathPattern:        "/accounts/{account_id}/metric_drains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountsAccountIDMetricDrainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountsAccountIDMetricDrainsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAccountsAccountIDMetricDrainsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAccountsAccountIDPermissions creates permission
*/
func (a *Client) PostAccountsAccountIDPermissions(params *PostAccountsAccountIDPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountsAccountIDPermissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountsAccountIDPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountsAccountIDPermissions",
		Method:             "POST",
		PathPattern:        "/accounts/{account_id}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountsAccountIDPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAccountsAccountIDPermissionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAccountsAccountIDPermissionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAppsAppIDConfigurations creates configuration
*/
func (a *Client) PostAppsAppIDConfigurations(params *PostAppsAppIDConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAppsAppIDConfigurationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppIDConfigurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppIDConfigurations",
		Method:             "POST",
		PathPattern:        "/apps/{app_id}/configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAppsAppIDConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAppsAppIDConfigurationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAppsAppIDConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAppsAppIDOperations creates operation
*/
func (a *Client) PostAppsAppIDOperations(params *PostAppsAppIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAppsAppIDOperationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppIDOperations",
		Method:             "POST",
		PathPattern:        "/apps/{app_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAppsAppIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAppsAppIDOperationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAppsAppIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostBackupsBackupIDOperations creates operation
*/
func (a *Client) PostBackupsBackupIDOperations(params *PostBackupsBackupIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostBackupsBackupIDOperationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBackupsBackupIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostBackupsBackupIDOperations",
		Method:             "POST",
		PathPattern:        "/backups/{backup_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBackupsBackupIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBackupsBackupIDOperationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostBackupsBackupIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostClaims creates claim

You do not need to invoke this directly. Reserves a handle
*/
func (a *Client) PostClaims(params *PostClaimsParams, authInfo runtime.ClientAuthInfoWriter) (*PostClaimsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClaimsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClaims",
		Method:             "POST",
		PathPattern:        "/claims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClaimsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostClaimsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostClaimsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostClaimsType creates claim

You do not need to invoke this directly. Reserves a handle
*/
func (a *Client) PostClaimsType(params *PostClaimsTypeParams, authInfo runtime.ClientAuthInfoWriter) (*PostClaimsTypeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClaimsTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClaimsType",
		Method:             "POST",
		PathPattern:        "/claims/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostClaimsTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostClaimsTypeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostClaimsTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostDatabaseCredentialsDatabaseCredentialIDOperations creates operation
*/
func (a *Client) PostDatabaseCredentialsDatabaseCredentialIDOperations(params *PostDatabaseCredentialsDatabaseCredentialIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostDatabaseCredentialsDatabaseCredentialIDOperationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDatabaseCredentialsDatabaseCredentialIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDatabaseCredentialsDatabaseCredentialIDOperations",
		Method:             "POST",
		PathPattern:        "/database_credentials/{database_credential_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDatabaseCredentialsDatabaseCredentialIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDatabaseCredentialsDatabaseCredentialIDOperationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostDatabaseCredentialsDatabaseCredentialIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostDatabasesDatabaseIDConfigurations creates configuration
*/
func (a *Client) PostDatabasesDatabaseIDConfigurations(params *PostDatabasesDatabaseIDConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostDatabasesDatabaseIDConfigurationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDatabasesDatabaseIDConfigurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDatabasesDatabaseIDConfigurations",
		Method:             "POST",
		PathPattern:        "/databases/{database_id}/configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDatabasesDatabaseIDConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDatabasesDatabaseIDConfigurationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostDatabasesDatabaseIDConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostDatabasesDatabaseIDOperations creates operation
*/
func (a *Client) PostDatabasesDatabaseIDOperations(params *PostDatabasesDatabaseIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostDatabasesDatabaseIDOperationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDatabasesDatabaseIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDatabasesDatabaseIDOperations",
		Method:             "POST",
		PathPattern:        "/databases/{database_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDatabasesDatabaseIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDatabasesDatabaseIDOperationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostDatabasesDatabaseIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostEphemeralSessionsEphemeralSessionIDOperations creates operation
*/
func (a *Client) PostEphemeralSessionsEphemeralSessionIDOperations(params *PostEphemeralSessionsEphemeralSessionIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostEphemeralSessionsEphemeralSessionIDOperationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEphemeralSessionsEphemeralSessionIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEphemeralSessionsEphemeralSessionIDOperations",
		Method:             "POST",
		PathPattern:        "/ephemeral_sessions/{ephemeral_session_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEphemeralSessionsEphemeralSessionIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEphemeralSessionsEphemeralSessionIDOperationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostEphemeralSessionsEphemeralSessionIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostImagesImageIDOperations creates operation
*/
func (a *Client) PostImagesImageIDOperations(params *PostImagesImageIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostImagesImageIDOperationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostImagesImageIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostImagesImageIDOperations",
		Method:             "POST",
		PathPattern:        "/images/{image_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostImagesImageIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostImagesImageIDOperationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostImagesImageIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostLogDrainsLogDrainIDOperations creates operation
*/
func (a *Client) PostLogDrainsLogDrainIDOperations(params *PostLogDrainsLogDrainIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLogDrainsLogDrainIDOperationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLogDrainsLogDrainIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLogDrainsLogDrainIDOperations",
		Method:             "POST",
		PathPattern:        "/log_drains/{log_drain_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLogDrainsLogDrainIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLogDrainsLogDrainIDOperationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLogDrainsLogDrainIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostMetricDrainsMetricDrainIDOperations creates operation
*/
func (a *Client) PostMetricDrainsMetricDrainIDOperations(params *PostMetricDrainsMetricDrainIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostMetricDrainsMetricDrainIDOperationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMetricDrainsMetricDrainIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMetricDrainsMetricDrainIDOperations",
		Method:             "POST",
		PathPattern:        "/metric_drains/{metric_drain_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMetricDrainsMetricDrainIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostMetricDrainsMetricDrainIDOperationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostMetricDrainsMetricDrainIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostOperationsOperationIDSSHPortalConnections creates ssh portal connection
*/
func (a *Client) PostOperationsOperationIDSSHPortalConnections(params *PostOperationsOperationIDSSHPortalConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostOperationsOperationIDSSHPortalConnectionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOperationsOperationIDSSHPortalConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOperationsOperationIDSSHPortalConnections",
		Method:             "POST",
		PathPattern:        "/operations/{operation_id}/ssh_portal_connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOperationsOperationIDSSHPortalConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOperationsOperationIDSSHPortalConnectionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostOperationsOperationIDSSHPortalConnectionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostServicesServiceIDOperations creates operation
*/
func (a *Client) PostServicesServiceIDOperations(params *PostServicesServiceIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostServicesServiceIDOperationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServicesServiceIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostServicesServiceIDOperations",
		Method:             "POST",
		PathPattern:        "/services/{service_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostServicesServiceIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostServicesServiceIDOperationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostServicesServiceIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostServicesServiceIDVhosts creates vhost
*/
func (a *Client) PostServicesServiceIDVhosts(params *PostServicesServiceIDVhostsParams, authInfo runtime.ClientAuthInfoWriter) (*PostServicesServiceIDVhostsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServicesServiceIDVhostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostServicesServiceIDVhosts",
		Method:             "POST",
		PathPattern:        "/services/{service_id}/vhosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostServicesServiceIDVhostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostServicesServiceIDVhostsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostServicesServiceIDVhostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostVhostsVhostIDOperations creates operation
*/
func (a *Client) PostVhostsVhostIDOperations(params *PostVhostsVhostIDOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostVhostsVhostIDOperationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVhostsVhostIDOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVhostsVhostIDOperations",
		Method:             "POST",
		PathPattern:        "/vhosts/{vhost_id}/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVhostsVhostIDOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVhostsVhostIDOperationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostVhostsVhostIDOperationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutAccountsID updates account
*/
func (a *Client) PutAccountsID(params *PutAccountsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAccountsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAccountsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAccountsID",
		Method:             "PUT",
		PathPattern:        "/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAccountsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAccountsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutAccountsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutAppsID updates app
*/
func (a *Client) PutAppsID(params *PutAppsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppsID",
		Method:             "PUT",
		PathPattern:        "/apps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAppsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAppsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutAppsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutCertificatesID updates certificate
*/
func (a *Client) PutCertificatesID(params *PutCertificatesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCertificatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCertificatesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCertificatesID",
		Method:             "PUT",
		PathPattern:        "/certificates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCertificatesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCertificatesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCertificatesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutDatabasesID updates database
*/
func (a *Client) PutDatabasesID(params *PutDatabasesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDatabasesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDatabasesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDatabasesID",
		Method:             "PUT",
		PathPattern:        "/databases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDatabasesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDatabasesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutDatabasesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutLogDrainsID updates log drain
*/
func (a *Client) PutLogDrainsID(params *PutLogDrainsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLogDrainsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLogDrainsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLogDrainsID",
		Method:             "PUT",
		PathPattern:        "/log_drains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutLogDrainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutLogDrainsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutLogDrainsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutOperationsID updates operation
*/
func (a *Client) PutOperationsID(params *PutOperationsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutOperationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutOperationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutOperationsID",
		Method:             "PUT",
		PathPattern:        "/operations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOperationsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutOperationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutOperationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutVhostsID updates vhost
*/
func (a *Client) PutVhostsID(params *PutVhostsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutVhostsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVhostsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVhostsID",
		Method:             "PUT",
		PathPattern:        "/vhosts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/hal+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutVhostsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVhostsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutVhostsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
